/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";


// @ts-ignore
var a_table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D";
// @ts-ignore
var b_table = a_table.split(' ').map(function(s){ return parseInt(s,16) });
// @ts-ignore
function b_crc32 (str) {
// @ts-ignore
    var crc = -1;
// @ts-ignore
    for(var i=0, iTop=str.length; i<iTop; i++) {
// @ts-ignore
        crc = ( crc >>> 8 ) ^ b_table[( crc ^ str.charCodeAt( i ) ) & 0xFF];
    }
// @ts-ignore
    return Number((crc ^ (-1)) >>> 0);
};

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = "{-";
  var peg$c1 = "-}";
  var peg$c2 = ";;";
  var peg$c3 = "const ";
  var peg$c4 = "=";
  var peg$c5 = ";";
  var peg$c6 = "c";
  var peg$c7 = "&";
  var peg$c8 = "|";
  var peg$c9 = "\"";
  var peg$c10 = "0";
  var peg$c11 = "::";

  var peg$r0 = /^[^{\-]/;
  var peg$r1 = /^[^\n\r]/;
  var peg$r2 = /^[^"]/;
  var peg$r3 = /^[Xx]/;
  var peg$r4 = /^[0-9a-fA-F]/;
  var peg$r5 = /^[0-9]/;
  var peg$r6 = /^[a-zA-Z0-9._:]/;
  var peg$r7 = /^[a-zA-Z0-9._:\^=()[\] ]/;
  var peg$r8 = /^[a-zA-Z0-9_$]/;
  var peg$r9 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("{-", false);
  var peg$e1 = peg$classExpectation(["{", "-"], true, false);
  var peg$e2 = peg$literalExpectation("-}", false);
  var peg$e3 = peg$literalExpectation(";;", false);
  var peg$e4 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$e5 = peg$literalExpectation("const ", false);
  var peg$e6 = peg$literalExpectation("=", false);
  var peg$e7 = peg$literalExpectation(";", false);
  var peg$e8 = peg$literalExpectation("c", false);
  var peg$e9 = peg$literalExpectation("&", false);
  var peg$e10 = peg$literalExpectation("|", false);
  var peg$e11 = peg$literalExpectation("\"", false);
  var peg$e12 = peg$classExpectation(["\""], true, false);
  var peg$e13 = peg$literalExpectation("0", false);
  var peg$e14 = peg$classExpectation(["X", "x"], false, false);
  var peg$e15 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e16 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e17 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "_", ":"], false, false);
  var peg$e18 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "_", ":", "^", "=", "(", ")", "[", "]", " "], false, false);
  var peg$e19 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "$"], false, false);
  var peg$e20 = peg$literalExpectation("::", false);
  var peg$e21 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
// @ts-ignore

  var peg$f0 = function(entries) {// @ts-ignore
 return entries.filter(elm => elm); };// @ts-ignore

  var peg$f1 = function(entries) {// @ts-ignore
 return entries.map(([entry,]) => entry); };// @ts-ignore

  var peg$f2 = function() {// @ts-ignore
 return null; };// @ts-ignore

  var peg$f3 = function() {// @ts-ignore
 return null; };// @ts-ignore

  var peg$f4 = function(type, key, val) {// @ts-ignore
 return { type, key, val }; };// @ts-ignore

  var peg$f5 = function(v, i) {// @ts-ignore
 return "0x" + ((b_crc32(v) & Number(i)) >>> 0).toString(16); };// @ts-ignore

  var peg$f6 = function(v, i) {// @ts-ignore
 return "0x" + ((b_crc32(v) | Number(i)) >>> 0).toString(16); };// @ts-ignore

  var peg$f7 = function(v) {// @ts-ignore
 return b_crc32(v); };// @ts-ignore

  var peg$f8 = function(v) {// @ts-ignore
 return v.join(""); };// @ts-ignore

  var peg$f9 = function(number) {// @ts-ignore
 return "0x" + number.join(""); };// @ts-ignore

  var peg$f10 = function(number) {// @ts-ignore
 return Number(number.join("")); };// @ts-ignore

  var peg$f11 = function(chars) {// @ts-ignore
 return chars.join(''); };// @ts-ignore

  var peg$f12 = function(chars) {// @ts-ignore
 return chars.join(''); };// @ts-ignore

  var peg$f13 = function(prefix) {// @ts-ignore
 return prefix.join(""); };
// @ts-ignore
  var peg$currPos = options.peg$currPos | 0;
// @ts-ignore
  var peg$savedPos = peg$currPos;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = peg$currPos;
// @ts-ignore
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
// @ts-ignore
  var peg$silentFails = options.peg$silentFails | 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if (options.startRule) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      if (pos >= peg$posDetailsCache.length) {
// @ts-ignore
        p = peg$posDetailsCache.length - 1;
// @ts-ignore
      } else {
// @ts-ignore
        p = pos;
// @ts-ignore
        while (!peg$posDetailsCache[--p]) {}
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseinstruction_list();
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f0(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinstruction_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = peg$currPos;
// @ts-ignore
    s4 = peg$parseinstruction();
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      s4 = [s4, s5];
// @ts-ignore
      s3 = s4;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s3;
// @ts-ignore
      s3 = peg$FAILED;
    }
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseinstruction();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f1(s2);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinstruction() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$parseassignment();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsecomment();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f2();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parsemultiline_comment();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f3();
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemultiline_comment() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c0) {
// @ts-ignore
      s1 = peg$c0;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r0.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r0.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c1) {
// @ts-ignore
        s3 = peg$c1;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomment() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c2) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r1.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r1.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseassignment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c3) {
// @ts-ignore
      s1 = peg$c3;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseprefix();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseword();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
            s6 = peg$c4;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            s8 = peg$parsevalue();
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                s9 = peg$c5;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f4(s3, s4, s8);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevalue() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$parsenumber();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseliteral();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 99) {
// @ts-ignore
          s2 = peg$c6;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
            s4 = peg$c7;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parse_();
// @ts-ignore
            s6 = peg$parseword();
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f5(s1, s6);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseliteral();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 99) {
// @ts-ignore
            s2 = peg$c6;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s3 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
              s4 = peg$c8;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
// @ts-ignore
            if (s4 !== peg$FAILED) {
// @ts-ignore
              s5 = peg$parse_();
// @ts-ignore
              s6 = peg$parseword();
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f6(s1, s6);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseliteral();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 99) {
// @ts-ignore
              s2 = peg$c6;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s2 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f7(s1);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
              s1 = peg$c9;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = [];
// @ts-ignore
              s3 = input.charAt(peg$currPos);
// @ts-ignore
              if (peg$r2.test(s3)) {
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
// @ts-ignore
              while (s3 !== peg$FAILED) {
// @ts-ignore
                s2.push(s3);
// @ts-ignore
                s3 = input.charAt(peg$currPos);
// @ts-ignore
                if (peg$r2.test(s3)) {
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s3 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e12); }
                }
              }
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
                s3 = peg$c9;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f8(s2);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumber() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
      s2 = peg$c10;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r3.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r4.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r4.test(s3)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f9(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = [];
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r5.test(s2)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        while (s2 !== peg$FAILED) {
// @ts-ignore
          s1.push(s2);
// @ts-ignore
          s2 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r5.test(s2)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f10(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseword() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r6.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r6.test(s2)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f11(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c9;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r7.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r7.test(s3)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
          s3 = peg$c9;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f12(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseprefix() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r8.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r8.test(s2)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c11) {
// @ts-ignore
        s2 = peg$c11;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f13(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r9.test(s1)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (options.peg$library) {
// @ts-ignore
    return /** @type {any} */ ({
// @ts-ignore
      peg$result,
// @ts-ignore
      peg$currPos,
// @ts-ignore
      peg$FAILED,
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos
    });
  }
// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = any;
export type InstructionList = Instruction[];
export type Instruction = Assignment | null;
export type MultilineComment = ["{-", string[], "-}"];
export type Comment = [";;", string[]];
export type Assignment = { type: Prefix; key: Word; val: Value };
export type Value = Number_1 | string | number;
export type Number_1 = string | number;
export type Word = string;
export type Literal = string;
export type Prefix = string;
export type _ = string[];
